# !! BEWARE !!
# Accidentally using a pin as an output with the output shorted will break your Pi,
# always use a series resistor on every input and output.
# Subjecting inputs to voltages outside the Pi's allowable range will break your Pi even with the series resistor.
# DO NOT CONNECT to +5V pin, use 3.3V pins.

# This file in /pipresents/pp_resources/pp_templates may be overwritten by updates and is not used by Pi Presents
# copy the file to the profile that is to use it.

# There is little checking of the content of this file by Pi Presents, try any changes by
#  running from a terminal window so that any exceptions are reported

# USE
# ===
# This file binds physical RPi GPIO input and output pins to the symbolic names of inputs and outputs used by Pi Presents
# It also configures the input pins.
# Pins refer to the Pi's P1 connector.

# The DRIVER section must be present
# A section for every pin of the GPIO connector must be present in the file with a direction of in, out or none.

# DRIVER SECTION
# ==============
# title = GPIOZERO    text which is reported on logs and error reports
# enabled = yes   yes/no a driver can be enabled/disabled using this so it can be left in pp_io_config
# module= pp_gpiozerodriver the python module that implements this driver. More than one I/O config file can use the same driver.


# PIN SECTIONS
# ==============
# The section name is the Board Name of pin on RPi board GPIO connector e.g. P1-11
    
# FOR ALL SECTIONS:
# direction          - in/out/none. if none section is ignored

# FOR INPUT SECTIONS:

# UNLIKE OTHER GPIO DRIVERS gpiozero use active and inactive rather then rising and falling.
#    pull-up and active-state determine whether active is 0V or 3.3V

# pull-up           - internal pullup up/down/none, up to +3v, down to 0v. If up activated is 0v, if down activated is +3V
# active-state      - high/low, high means +3v=active, low means 0v=active. Needs to be set if and only if pull_up is none
# activated-name    - symbolic name of Activated input event, if blank no event is generated
# deactivated-name  - symbolic name of Deactivated input event, if blank no event is generated
# hold-name         - symbolic name of the Activated Hold event generated after the hold time, if blank no event is generated
# hold-time         - time in seconds (float) that an input must be held active before the Hold event is generated
# hold-repeat       - yes/no repeat the Hold event after repeat_time
# repeat-time       - time in seconds (float) that an input must be held active before the Hold event is re-generated
# bounce-time       - input must be steady for this number of seconds (float) for a state change to be registered.
# linked-output     - board name of output pin that follows the input


# FOR OUTPUT SECTIONS:
# UNLIKE OTHER GPIO DRIVERS gpiozero uses on and off to mean acctive or inactive. active-high determines whether active is 0V or 3.3V
# name              - symbolic name to be used in output method
# active-high       - high/low, for high On State produces +3v, for low On State produces 0 volts


# Example of an unused pin
# [P1-07]
# direction = none 


# Example of an input pin that generates an event when a button wired to 0 Volts is pressed
# [P1-07]
# direction = in
# pull-up = up
# active-state =
# activated-name = pp-stop
# deactivated-name =
# held-name =
# hold-time =
# hold-repeat=
# repeat-time=
# bounce-time = 0.1
# linked-output=



# example of a pin used to create a repeating event for volume control etc.
# [P1-07]
# direction = in
# pull-up = up
# active-state =
# activated-name = vol-up
# deactivated-name =
# held-name = vol-up
# hold-time = 0.5
# hold-repeat= yes
# repeat-time= 0.5
# bounce-time = 0.1
# linked-output=


# example of a pin used to create an event after a period of time of pressing the button
# [P1-07]
# direction = in
# pull-up = up
# active-state =
# activated-name =
# deactivated-name =
# held-name = pp-shutdownnow
# hold-time = 5
# hold-repeat= no
# repeat-time=
# bounce-time = 0.1
# linked-output=



# OUTPUTS
# -------
# The RPi initialises GPIO outputs to 0 volts so it is best to:
# a. set active-high to high
# b. design relays etc. for positive logic.

# Example of an output section
# [P1-11]
# direction=out
# active-high = high
# name= LED

# THIS TEMPLATE
# =============

# In their Controls field the templates and examples of Pi Presents bind the following symbolic names to the commands used by mediashow, liveshow and menu, and to some special commands.
# So that gpio can be used with the examples these symbolic names are assigned to an arbitrary set of pins in this file. You will want to modify them for your application:

#   pp-shutdownnow   initiates shutdown
#   pp-down       down - move down a menu or next track in a mediashow
#   pp-up         up - move up a menu or previous track in a mediashow
#   pp-play       play - start playing a track in a menu etc.
#   pp-pause      pause - toggle pause in relevant tracks
#   pp-stop       stop - stop tracks and shows

#   PIR - used as the trigger input for the exhibit example

# Other symbolic names for inputs can be defined in profiles and used for:
#  call and return commands etc. in  hyperlinkshows
#  play commands radiobuttonshows
#  for start-trigger end-trigger and next-trigger in mediashows


# The examples, manual, and assignments below assume the use of normally open push buttons connected to ground (0 volts) and a PIR with normally closed contacts connected to ground.

# THE REAL STUFF
# -------

[DRIVER]
title = GPIOZERO    
enabled = yes
module= pp_gpiozerodriver

# THE PINS

# Has a permanent 1K8 pull up resistor, so use for input and output with care 
[P1-03]
direction = none

# Has a permanent 1K8 pull up resistor,so use for input and output with care
[P1-05]
direction = none

[P1-07]
direction = in
pull-up = up
active-state =
activated-name = pp-stop
deactivated-name = 
held-name = 
hold-time =
hold-repeat= no
repeat-time=
bounce-time = 0.1
linked-output= 

[P1-08]
direction = none

[P1-10]
direction = none

# PIR is used as a trigger event in some examples
[P1-11]
direction = in
pull-up = up
active-state =
activated-name = PIR
deactivated-name =
held-name = 
hold-time =
hold-repeat= no
repeat-time=
bounce-time = 0.1
linked-output= 


#for Ken's testing
#direction=out
#active-high = high
#name = LED

# shutdown the Rpi after 5 seconds
[P1-12]
direction = in
pull-up = up
active-state =
activated-name = 
deactivated-name = 
held-name = pp-shutdownnow
hold-time = 5
hold-repeat= no
repeat-time=
bounce-time = 0.1
linked-output= 


[P1-13]
direction = none

[P1-15]
direction = in
pull-up = up
active-state = 
activated-name = pp-down
deactivated-name = 
held-name = 
hold-time =
hold-repeat= no
repeat-time= 
bounce-time = 0.1
linked-output= 


[P1-16]
direction = in
pull-up = up
active-state = 
activated-name = pp-up
deactivated-name = 
held-name = 
hold-time =
hold-repeat= no
repeat-time= 
bounce-time = 0.1
linked-output= 


[P1-18]
direction = in
pull-up = up
active-state = 
activated-name = pp-play
deactivated-name = 
held-name = 
hold-time =
hold-repeat= no
repeat-time= 
bounce-time = 0.1
linked-output= 

[P1-19]
direction = none

[P1-21]
direction = none 

[P1-22]
direction = in
pull-up = up
active-state = 
activated-name = pp-pause
deactivated-name = 
held-name = 
hold-time =
hold-repeat= no
repeat-time= 
bounce-time = 0.1
linked-output= 


[P1-23]
direction = none

[P1-24]
direction = none

[P1-26]
direction = none

#40 pin additional pins
[P1-29]
direction = none
[P1-31]
direction = none
[P1-32]
direction = none
[P1-33]
direction = none
[P1-35]
direction = none
[P1-36]
direction = none
[P1-37]
direction = none
[P1-38]
direction = none
[P1-40]
direction = none
